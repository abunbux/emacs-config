# -*- mode: org; -*-
#+TITLE: функции, которыми не пользуюсь
#+DESCRIPTION:
#+KEYWORDS:
#+AUTHOR:
#+email:
#+INFOJS_OPT:
#+STARTUP:  content

#+DATE: CREATED: <Tue Jul 05 18:31:53 EEST 2022>
# Time-stamp: <Последнее обновление -- Tuesday July 5 22:52:42 EEST 2022>


** Редактирование текста

***  my/clear-kill-ring () - функция очищает kill-ring

    Ни разу не понадобилось

    #+BEGIN_SRC emacs-lisp

    (defun my/clear-kill-ring ()
      "Clear the kill ring variable"
      (interactive)
      (setq kill-ring nil
            kill-ring-yank-pointer nil))

    #+END_SRC

** Перемещение по тексту

*** my/goto-longest-line () - перемещение к самой длинной строке

    Никогда не пользовался.
    https://www.emacswiki.org/emacs/basic-edit-toolkit.el

    #+BEGIN_SRC emacs-lisp

    (defun region-or-buffer-limits ()
      "Return the start and end of the region as a list, smallest first.
        If the region is not active or empty, then bob and eob are used."
      (if (or (not mark-active) (null (mark)) (= (point) (mark)))
          (list (point-min) (point-max))
        (if (< (point) (mark)) (list (point) (mark)) (list (mark) (point)))))

    (defun my/goto-longest-line (beg end)
      "Goto the longest line of current buffer."
      (interactive `,(region-or-buffer-limits))
      (when (= beg end) (error "The buffer is empty"))
      (when (eq this-command last-command) (forward-line 1) (setq beg (point)))
      (goto-char beg)
      (let* ((start-line (line-number-at-pos))
             (max-width 0)
             (line start-line)
             long-lines col)
        (when (eobp) (error "End of buffer"))
        (while (and (not (eobp)) (or (not mark-active) (< (point) end)))
          (end-of-line)
          (setq col (current-column))
          (when (>= col max-width)
            (if (= col max-width)
                (setq long-lines (cons line long-lines))
              (setq long-lines (list line)))
            (setq max-width col))
          (forward-line 1)
          (setq line (1+ line)))
        (setq long-lines (nreverse long-lines))
        (let ((lines long-lines))
          (while (and lines (> start-line (car lines))) (pop lines))
          (goto-line (or (car lines) start-line)))
        (when (interactive-p)
          (let ((others (cdr long-lines)))
            (message
             "Line %d: %d chars%s (%d lines measured)"
             (car long-lines) max-width
             (concat (and others (format ", Others: {%s}"
                                         (mapconcat (lambda (line) (format "%d" line))
                                                    (cdr long-lines) ", "))))
             (- line start-line))))
        (list (car long-lines) max-width (cdr long-lines) (- line start-line))))


    #+END_SRC

** Работа с файлами

*** my/find-or-create... () - создание файла с именем в точке

    Не пользуюсь - закомментировал.
    https://github.com/magnars/.emacs.d/blob/master/defuns/file-defuns.el
    Следующие три функции взаимосвязаны -
    ~my/find-or-create-file-at-point ()~ и ~my/find-or-create-file-at-point-other-window ()~
    используют ~file-name-at-point ()~

    #+BEGIN_SRC emacs-lisp

    file-name-at-point ()
    (defun file-name-at-point ()
      (save-excursion
        (let* ((file-name-regexp "[./a-zA-Z0-9\-_~]")
               (start (progn
                        (while (looking-back file-name-regexp)
                          (forward-char -1))
                        (point)))
               (end (progn
                      (while (looking-at file-name-regexp)
                        (forward-char 1))
                      (point))))
          (buffer-substring start end))))


    ;; Если в точке находится кокое-либо слово, будет создан буфер с этим именем
    ;; и в этой же директории, если в точке находится имя уже существующего в этой
    ;; директории буфера - он будет открыт в новом окне.

    ;;; my/find-or-create-file-at-point ("C-x M-1")
    (defun my/find-or-create-file-at-point ()
      "Guesses what parts of the buffer under point is a file name and opens it."
      (interactive)
      (find-file (file-name-at-point)))


    ;;; my/find-or-create-file-at-point-other-window ("C-x M-3")
    (defun my/find-or-create-file-at-point-other-window ()
      "Guesses what parts of the buffer under point is a file name and opens it."
      (interactive)
      (find-file-other-window (file-name-at-point)))

    ;; (bind-key "C-x M-1" 'my/find-or-create-file-at-point)
    ;; (bind-key "C-x M-3" 'my/find-or-create-file-at-point-other-window)


    #+END_SRC

** Работа с буферами

*** Тюнингуем scratch
    emacs всегда открывает scratch-буфер после запуска. От него невозможно избавиться, но можно
    сделать более полезным, если добавить в него несколько ссылок на домашнюю директорию, файл с
    личными паролями зашифрованный эмаксом с помощью GNU Privacy Guard
    (https://ru.wikipedia.org/wiki/GnuPG), активные проекты, сайты и прочее.

    https://github.com/zahardzhan/well-tuned-emacs

    #+BEGIN_SRC emacs-lisp

    well-tuned-emacs-scratch-buffer-message ()
    (add-hook 'emacs-startup-hook
              (defun well-tuned-emacs-scratch-buffer-message ()
                (with-current-buffer "*scratch*"
                  (let ((scratch-buf-last-char (point-max)))
                    (goto-char scratch-buf-last-char)
                    (fancy-splash-insert
                     :link (list "File" (lambda (_button) (call-interactively #'find-file))
                                 "Specify a new file's name, to edit the file")
                     " "
                     :link (list "Home" (lambda (_button) (dired "~"))
                                 "Open home directory, to operate on its files")
                     " "
                     :link (list "Passwords" (lambda (_button)
                                               (let ((passwords "~/Dropbox/Passwords.org.gpg"))
                                                 (when (file-exists-p passwords)
                                                   (find-file passwords))))
                                 "Open encrypted password vault"))
                    (comment-region scratch-buf-last-char (point))
                    (newline)
                    (goto-char (point-max))
                    (set-buffer-modified-p nil)))))

    #+END_SRC

** Работа с окнами

*** my/delete-other-window () - прибить окно

    Убивает соседнее окно при поделенном на несколько окон фрейме.
    Закомментировал ввиду ненадобности
    Сам писал, горжусь :)

    #+BEGIN_SRC emacs-lisp

    (defun my/delete-other-window()
      "Слишком долго каждый раз набирать 'C-x o ; M-x kill-this-buffer RET C-x 1'
    То есть - открываешь окно справки или ещё чего-нибудь, когда окно разделено надвое,
    а затем, чтобы не оставлять целую кучу буферов, лучше его прибить.
    Также, в случае наличия только одного окна, убивает данный буфер"
      (interactive)
      (other-window 1)
      (kill-this-buffer)
      (delete-other-windows))

    ;; (bind-key "-----" 'my/delete-other-window)

    #+END_SRC
