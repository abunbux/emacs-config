# -*- mode: org; -*-
#+TITLE: emacs-daemon
#+DESCRIPTION:
#+KEYWORDS:
#+AUTHOR:
#+email:
#+INFOJS_OPT:
#+STARTUP:  content

#+DATE: CREATED: <Thu Aug 05 01:39:53 EEST 2021>
# Time-stamp: <Последнее обновление -- Thursday August 5 2:10:20 EEST 2021>


https://www.emacswiki.org/emacs/EmacsAsDaemon


#+begin_src shell

  emacs --daemon
  emacs --fg-daemon
  emacsclient -c -a emacs
  emerge app-emacs/emacs-daemon
  ln -s emacs /etc/init.d/emacs.{username}
  rc-update add emacs.{username} default

  emacs /etc/conf.d/emacs or /etc/conf.d/emacs.{username}

#+end_src

** Остановка демона Emacs

   #+begin_src shell
     kill-emacs
     # or
     save-buffers-kill-emacs
   #+end_src

   Вот более продвинутая функция, которая спросит, хотите ли вы сохранить
   какие-либо измененные буферы, завершить сеанс и выключить связанный экземпляр
   сервера emacs.

   #+begin_src emacs-lisp
     ;; define function to shutdown emacs server instance
     (defun server-shutdown ()
       "Save buffers, Quit, and Shutdown (kill) server"
       (interactive)
       (save-some-buffers)
       (kill-emacs)
       )
   #+end_src

   Извне работающего экземпляра (это немедленно выключит демон без запроса или сохранения файлов):

   #+begin_src shell
     emacsclient -e '(kill-emacs)'
   #+end_src

   Если вы хотите, чтобы emacs запрашивал наличие несохраненных буферов или
   существующих клиентов/фреймов, вы можете добавить следующие функции в свой
   файл .emacs, а затем использовать команду:

   #+begin_src shell
     emacsclient -e '(client-save-kill-emacs)'
   #+end_src


   #+begin_src emacs-lisp
     (defun client-save-kill-emacs(&optional display)
       " This is a function that can bu used to save buffers and
     shutdown the emacs daemon. It should be called using
     emacsclient -e '(client-save-kill-emacs)'.  This function will
     check to see if there are any modified buffers, active clients
     or frame.  If so, an x window will be opened and the user will
     be prompted."

       (let (new-frame modified-buffers active-clients-or-frames)

         ;; Check if there are modified buffers, active clients or frames.
         (setq modified-buffers (modified-buffers-exist))
         (setq active-clients-or-frames ( or (> (length server-clients) 1)
                                             (> (length (frame-list)) 1)
                                             ))

         ;; Create a new frame if prompts are needed.
         (when (or modified-buffers active-clients-or-frames)
           (when (not (eq window-system 'x))
             (message "Initializing x windows system.")
             (x-initialize-window-system))
           (when (not display) (setq display (getenv "DISPLAY")))
           (message "Opening frame on display: %s" display)
           (select-frame (make-frame-on-display display '((window-system . x)))))

         ;; Save the current frame.
         (setq new-frame (selected-frame))


         ;; When displaying the number of clients and frames:
         ;; subtract 1 from clients (this client).
         ;; subtract 2 from frames (the frame just created and the default frame.)
         (when (or (not active-clients-or-frames)
                   (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2))))

           ;; If the user quits during the save dialog then don't exit emacs.
           ;; Still close the terminal though.
           (let((inhibit-quit t))
             ;; Save buffers
             (with-local-quit
               (save-some-buffers))

             (if quit-flag
                 (setq quit-flag nil)
               ;; Kill all remaining clients
               (progn
                 (dolist (client server-clients)
                   (server-delete-client client))
                 ;; Exit emacs
                 (kill-emacs)))
             ))

         ;; If we made a frame then kill it.
         (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
         )
       )


     (defun modified-buffers-exist()
       "This function will check to see if there are any buffers
     that have been modified.  It will return true if there are
     and nil otherwise. Buffers that have buffer-offer-save set to
     nil are ignored."
       (let (modified-found)
         (dolist (buffer (buffer-list))
           (when (and (buffer-live-p buffer)
                      (buffer-modified-p buffer)
                      (not (buffer-base-buffer buffer))
                      (or
                       (buffer-file-name buffer)
                       (progn
                         (set-buffer buffer)
                         (and buffer-offer-save (> (buffer-size) 0))))
                      )
             (setq modified-found t)
             )
           )
         modified-found
         )
       )
   #+end_src

** Загрузка темы при работе с демоном

   https://www.linux.org.ru/forum/desktop/14497159

   #+begin_src emacs-lisp

     (if (daemonp)
         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (with-selected-frame frame (load-theme 'spacemacs-dark t))))
       (load-theme 'spacemacs-dark t))

   #+end_src
